openapi: 3.0.1
#Dentro de la web Swagger buscar basic structure -> guía a seguir para crear la semilla
#El tabulado es el que marca el inicio y el fin del cada parte del código
#Muy importante tabular bien.
#https://editor.swagger.io/
#https://swagger.io/docs/specification/2-0/basic-structure/

info:
  description: |-
    API para la gestión de club deportivos
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  title: HappDeporte API
  contact:
    name: Germán Rodríguez Serrano
    email: a26318@svalero.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"

# tags -> Para catalogar los endpoint de la API
servers:
  - url: https://localhost:8080 #URL basic de la Api, la que todas las URL van a tener
    description: HappDeporte

tags:
  - name: User
    description: Operaciones sobre los Usuarios
  - name: Player
    description: Operaciones sobre los Jugadores
  - name: Team
    description: Operacions sobre los Equipos
  - name: Match
    description: Operaciones sobre os Partidos
  - name: Clothes
    description: Operaciones sobre los pedidos de Ropa

paths: # Rutas operaciones que tenemos por cada path Ej: /users
  # operaciones sobre /users
  /users:
    post:
      tags:
        - User
      # sumary: Alta de Usuarios
      description: Registro de un nuevo usuario para poder usar  la aplicación
      operationId: postUser # Id de operación tiene que ser único Ej: getUserByPlayer getALl getById
      requestBody: # Para indicarle que lleva un cuerpo de entrada para dar de alta
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - User
        # - Lines #Ejemplo no es bueno que este duplicado pero podría ir en ambos path
      summary: Listado de Usuarios
      description: Obtiene la información de todos los usuarios del sistema. Permite filtros como name, rol y coach
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Rol'
        - $ref: '#/components/parameters/Coach'
      responses:
        '200':
          description: Se devuelve el listado de usuarios correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  #Usamos la ruta schemas para que cargue el schema. Se consulta en Structure->Compoments
                  #nos ahorramos código, es como llamar a un método
                  $ref: '#/components/schemas/User'
        '500':
          #Usamos la ruta responses para que cargue la definión común para este tipo de respuesta
          #nos ahorramos código, es como llamar a un método
          $ref: '#/components/responses/InternalServerError'


  '/users/{userId}':
    parameters:
      #Marcamos la referencia a /components/parameters/UserId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  /users/{userId} aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/UserId'

    delete:
      tags:
        - User
      summary: Dar de baja un usuario
      description: Operación de borrado de usuarios por id
      operationId: deleteUserId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User
      summary: Modificación de usuario
      description: Modificiación de un usuario por id
      operationId: modifyUserId
      requestBody:
        description: Los datos nuevos de un usuario, aqui si podemos asignar los campos coach y rol
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - User
      summary: Consulta de usuario por Id
      description: Consulta de usuario por su identificador único
      operationId: getUserId
      responses:
        '200':
          description: Se devuelve la información de un usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  '/users/username/{username}':
    parameters:
      #Marcamos la referencia a /components/parameters/UserId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  /users/{userId} aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/Username'

    get:
      tags:
        - User
      summary: Busqueda por Username
      description: Operación de buscar un usuario por username que es único
      operationId: getUsername
      responses:
        '200':
          description: Se devuelve la información del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /players':
    get:
      tags:
        - Player
        # - Lines #Ejemplo no es bueno que este duplicado pero podría ir en ambos path
      summary: Listado de Jugadores
      description: Obtiene la información de todos los jugadores del sistema. Permite filtros como name, rol y coach
      operationId: getPlayer
      parameters:
        - $ref: '#/components/parameters/UserInPlayer'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Active'
      responses:
        '200':
          description: Se devuelve el listado de jugadores correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  #Usamos la ruta schemas para que cargue el schema. Se consulta en Structure->Compoments
                  #nos ahorramos código, es como llamar a un método
                  $ref: '#/components/schemas/Player'
        '500':
          #Usamos la ruta responses para que cargue la definión común para este tipo de respuesta
          #nos ahorramos código, es como llamar a un método
          $ref: '#/components/responses/InternalServerError'

  '/users/{userId}/players':
    parameters:
      #Marcamos la referencia a /components/parameters/UserId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  /users/{userId} aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/UserId'

    post:
      tags:
        - Player
#      sumary: Alta de Jugadores
      description: Registro de un nuevo jugador asociado a un user existente (Padre, Madre o Tutor)
      operationId: postPlayer # Id de operación tiene que ser único
      requestBody: # Para indicarle que lleva un cuerpo de entrada para dar de alta
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerIn'
      responses:
        '201':
          description: Jugador creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  '/players/{playerId}':
    parameters:
      #Marcamos la referencia a /components/parameters/PlayerId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  /players/{playerId} aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/PlayerId'

    delete:
      tags:
        - Player
      summary: Dar de baja un jugador
      description: Operación de borrado de Judagor por id, no se borra en cascada. El usuario asociado permanece
      operationId: deletePlayerId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Player
      summary: Modificación de jugadores
      description: Modificiación de un jugador por id
      operationId: modifyPlayerId
      requestBody:
        description: Los datos nuevos de un jugador
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerPut'
      responses:
        '201':
          description: Jugador modificado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequestPlayer'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Player
      summary: Consulta de jugador por Id
      description: Consulta de jugador por su identificador único
      operationId: getPlayerId
      responses:
        '200':
          description: Se devuelve la información del jugador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  '/users/{userId}/teams':
    parameters:
      #Marcamos la referencia a /components/parameters/UserId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  users/{userId}/teams aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/UserId'

    post:
      tags:
        - Team
      #      sumary: Alta de Equipos
      description: Registro de un nuevo equipo asociado a un user (El user es el Entrenador asociado)
      operationId: postTeam # Id de operación tiene que ser único
      requestBody: # Para indicarle que lleva un cuerpo de entrada para dar de alta
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamIn'
      responses:
        '201':
          description: Equipo creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequestTeam'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  '/teams/{id}':
    parameters:
      #Marcamos la referencia a /components/parameters/TeamId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  teams/{teamId}/teams aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/TeamId'

    delete:
      tags:
        - Team
      summary: Dar de baja un Equipo
      description: Operación de borrado de Equipo por id, no se borra en cascada. El usuario asociado permanece
      operationId: deleteTeamId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  '/teams/{idTeam}/users/{idUser}':
    parameters:
      #Marcamos la referencia a /components/parameters/TeamId donde hemos definido los datos y así podemos reutilizarlos
      #Para los que usen el Path  teams/{teamId}/teams aplica el $ref así ahorramos código repetido
      - $ref: '#/components/parameters/TeamId'
      - $ref: '#/components/parameters/UserId'

    put:
      tags:
        - Team
      summary: Modificación de equipos
      description: Modificación de un equipo por id
      operationId: modifyTeamId
      requestBody:
        description: Los datos nuevos de un equipo
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPut'
      responses:
        '201':
          description: Equipo modificado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequestTeam'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'





  #Podemos crear components para reutilizarlps como contenido dentro de las respuestas
  #Panel izquierdo -> Structure -> Components -> Components
components:
  schemas:
    UserIn:
      type: object
      properties:
        username:
          type: string
          format: string
          description: Nombre de usuario, se realiza validaciones para que no sea null, campo en blanco, longuitud mínima de carácteres 3 y máxima 9
          example: ger13
        pass:
          type: string
          format: string
          description: Contraseña de usuario, se realiza validaciones para que no sea null, campo en blanco, longuitud mínima de carácteres 6 y máxima 16
          example: Acces0@Dat0S
        name:
          type: string
          format: string
          description: Nombre del usuario que se registra
          example: German
        surname:
          type: string
          format: string
          description: Apellidos del usuario que se registra
          example: Rodriguez Serrano
        address:
          type: string
          format: string
          description: Direccion del usuario que se registra
          example: Calle Tacona, 23
        phone:
          type: string
          format: string
          description: Número de teléfono del usuario, se realiza validaciones para que no sea null, campo en blanco, longuitud mínima de carácteres 9
          example: 666 66 66 66

    User:
      allOf:
        - type: object
          properties:
            id:
              type: number
              format: long
              description: Id autonúmerico como clave primaria de la BBDD
              example: 13
        - $ref: '#/components/schemas/UserIn'
        - $ref: '#/components/schemas/UserPut'

    UserPut:
      allOf:
        - type: object
          properties:
            rol:
              type: string
              format: string
              description: Permisos de acceso a la API
              example: coach
            coach:
              type: boolean
              format: boolean
              description: Para indicar si es o no entrenador de un equipo
              example: true
        - $ref: '#/components/schemas/UserIn'

    PlayerIn:
      type: object
      properties:
        name:
          type: string
          format: string
          description: Nombre del jugador, se realiza validaciones para que no sea null, campo en blanco
          example: Adriana
        surname:
          type: string
          format: string
          description: Apellidos del jugador, se realiza validaciones para que no sea null, campo en blanco
          example: Rodríguez Domínguez
        dni:
          type: string
          format: string
          description: Dni del jugador, se realiza validaciones para que no sea null, campo en blanco
          example: 50979686W
        birthDate:
          type: Date
          format: LocalDate
          description: Fecha de Nacimiento del Jugador
          example: 2010-01-05
        allergy:
          type: string
          format: string
          description: Alergias o Intolerancias que tiene el jugador
          example: lactosa y fructosa
        dorsal:
          type: number
          format: int
          description: Dorsal de la equipación del jugador
          example: 8
        sex:
          type: string
          format: char
          description: Masculino o Femenino
          example: F
        active:
          type: boolean
          format: boolean
          description: Jugador en activo o no

    Player:
      allOf:
        - $ref: '#/components/schemas/PlayerIn'
        - type: object
          properties:
            id:
              type: number
              format: long
              description: Id autonúmerico como clave primaria de la BBDD
              example: 24
            user:
              $ref: '#/components/schemas/User'
#          - $ref: '#/components/schemas/UserPut'

    PlayerPut:
      allOf:
        - $ref: '#/components/schemas/PlayerIn'

    TeamIn:
      type: object
      properties:
        category:
          type: string
          format: string
          description: Categoria en la que juega el equipo, se realiza validaciones para que no sea null, campo en blanco
          example: Benjamin
        competition:
          type: string
          format: string
          description: Competición en la que juega, se realiza validaciones para que no sea null, campo en blanco
          example: Moratalaz
        cuota:
          type: number
          format: double
          description: Cuota que cuesta jugar en el equipo
          example: 300
        dayTrain:
          type: string
          format: string
          description: Dia que realiza entrenamientos
          example: Martes y Jueves
        startTrain:
          type: LocalTime
          format: LocalTime
          description: Hora de comienzo del entrenamiento
          example: 19:15
        endTrain:
          type: LocalTime
          format: LocalTime
          description: Hora de finalización del entrenamiento
          example: 20:15
        active:
          type: boolean
          format: boolean
          description: Equipo en activo

    Team:
      allOf:
        - $ref: '#/components/schemas/TeamIn'
        - type: object
          properties:
            id:
              type: number
              format: long
              description: Id autonúmerico como clave primaria de la BBDD
              example: 2
            user:
              $ref: '#/components/schemas/User'
    #          - $ref: '#/components/schemas/UserPut'

    TeamPut:
      allOf:
        - $ref: '#/components/schemas/TeamIn'
#        - type: object
#          properties:
#            userInTeam:
#              type: number
#              format: long
#              description: Id autonúmerico como clave primaria de la BBDD
#              example: 13

    BadRequest:
      type: object
      properties:
        code:
          type: string
          description: código de estado
          example: 400
        message:
          type: string
          description: Mensaje de error
          example: Error de validación
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorField'

    ErrorField:
      type: object
      description: Error de validación en un campo de entrada
      properties:
        fieldName:
          type: string
          description: El campo donde se ha producido el error
          example: username
        message:
          type: string
          description: Mensaje de error asociado con el campo
          example: El campo no puede estar el campo en blanco

    BadRequestPlayer:
      type: object
      properties:
        code:
          type: string
          description: código de estado
          example: 400
        message:
          type: string
          description: Mensaje de error
          example: Error de validación
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorFieldPlayer'

    ErrorFieldPlayer:
      type: object
      description: Error de validación en un campo de entrada
      properties:
        fieldName:
          type: string
          description: El campo donde se ha producido el error
          example: dni
        message:
          type: string
          description: Mensaje de error asociado con el campo
          example: El campo no puede estar el campo en blanco

    BadRequestTeam:
      type: object
      properties:
        code:
          type: string
          description: código de estado
          example: 400
        message:
          type: string
          description: Mensaje de error
          example: Error de validación
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorFieldTeam'

    ErrorFieldTeam:
      type: object
      description: Error de validación en un campo de entrada
      properties:
        fieldName:
          type: string
          description: El campo donde se ha producido el error
          example: category
        message:
          type: string
          description: Mensaje de error asociado con el campo
          example: El campo no puede estar el campo en blanco

    NotFound:
      type: object
      description: Objeto no encontrado
      properties:
        code:
          type: string
          description: código de estado
          example: 404
        message:
          type: string
          description: Mensaje de error
          example: Not found

    InternalServerError:
      type: object
      description: Error Interno de la API
      properties:
        code:
          type: string
          description: Código de estado
          example: 500
        message:
          type: string
          description: Mensaje de error
          example: Internal Server Error

    #Podemos crear respuestas para reutilizarlas y no tener que estar escribiendo lo mismo constantemente
    #Panel izquierdo -> Structure -> Components -> Responses
  responses:
    NoContent:
      description: No Content

    BadRequest:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'

    BadRequestPlayer:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestPlayer'

    BadRequestTeam:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestTeam'

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  parameters:
    UserId:
      name: userId
      in: path
      description: Identificador del Usuario
      required: true
      schema:
        type: number
        format: long
        example: 13
    Username:
      name: username
      in: path
      description: Nombre de Usuario
      required: true
      schema:
        type: string
        format: string
        example: Ger13
    Name:
      name: name
      in: query #@RequestParam: no forma parte de la URL, se carga por "?" como opción, es un "WHERE".
      description: Filtrar por el nombre introducido
      required: false
      schema:
        type: string
        format: string
        example: german
    Rol:
      name: rol
      in: query #@RequestParam: no forma parte de la URL, se carga por "?" como opción, es un "WHERE".
      description: Filtrar por los permisos que tienen los usuarios asociados
      required: false
      schema:
        type: string
        format: string
        enum: [admin, coach, user]
        example: coach
    Coach:
      name: coach
      in: query #@RequestParam: no forma parte de la URL, se carga por "?" como opción, es un "WHERE".
      description: Filtrar por los usarios que son o no entrenadores
      required: false
      schema:
        type: boolean
        format: boolean
        enum: [true, false]
        example: true
    PlayerId:
      name: playerId
      in: path
      description: Identificador de un jugador
      required: true
      schema:
        type: number
        format: long
        example: 13
    UserInPlayer:
      name: userInPlayer
      in: query
      description: Identificador de un jugador, cuando se filtra solo por este parámetro se devuelve listado ordenado por sexo
      required: false
      schema:
        type: number
        format: long
        example: 2
    Active:
      name: active
      in: query
      description: Filtrar por los jugadores en activo del club, cuando se filtra solo por este parámetro se devuelve listado ordenado por sexo
      required: false
      schema:
        type: boolean
        format: boolean
        enum: [ true, false ]
        example: true
    TeamId:
      name: teamId
      in: path
      description: Identificador de un equipo
      required: true
      schema:
        type: number
        format: long
        example: 1
#  examples:
#    userUnoExample:
#      value:
#        - $ref: '#/components/schemas/User'
#
#    userDosExample:
#      value:
#        - $ref: '#/components/schemas/UserDos'







